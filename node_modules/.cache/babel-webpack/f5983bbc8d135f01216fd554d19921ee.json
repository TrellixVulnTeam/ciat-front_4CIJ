{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils, ZIndexUtils } from 'primeng/utils';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\n\nfunction CascadeSelectSub_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction CascadeSelectSub_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CascadeSelectSub_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.optionTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, option_r1));\n  }\n}\n\nfunction CascadeSelectSub_ng_template_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.getOptionLabelToRender(option_r1));\n  }\n}\n\nfunction CascadeSelectSub_ng_template_1_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 10);\n  }\n}\n\nfunction CascadeSelectSub_ng_template_1_p_cascadeSelectSub_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-cascadeSelectSub\", 11);\n    i0.ɵɵlistener(\"onSelect\", function CascadeSelectSub_ng_template_1_p_cascadeSelectSub_6_Template_p_cascadeSelectSub_onSelect_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onOptionSelect($event);\n    })(\"onOptionGroupSelect\", function CascadeSelectSub_ng_template_1_p_cascadeSelectSub_6_Template_p_cascadeSelectSub_onOptionGroupSelect_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onOptionGroupSelect();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectionPath\", ctx_r7.selectionPath)(\"options\", ctx_r7.getOptionGroupChildren(option_r1))(\"optionLabel\", ctx_r7.optionLabel)(\"optionValue\", ctx_r7.optionValue)(\"level\", ctx_r7.level + 1)(\"optionGroupLabel\", ctx_r7.optionGroupLabel)(\"optionGroupChildren\", ctx_r7.optionGroupChildren)(\"parentActive\", ctx_r7.isOptionActive(option_r1))(\"dirty\", ctx_r7.dirty)(\"optionTemplate\", ctx_r7.optionTemplate);\n  }\n}\n\nfunction CascadeSelectSub_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵlistener(\"click\", function CascadeSelectSub_ng_template_1_Template_div_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onOptionClick($event, option_r1);\n    })(\"keydown\", function CascadeSelectSub_ng_template_1_Template_div_keydown_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const option_r1 = restoredCtx.$implicit;\n      const i_r2 = restoredCtx.index;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onKeyDown($event, option_r1, i_r2);\n    });\n    i0.ɵɵtemplate(2, CascadeSelectSub_ng_template_1_ng_container_2_Template, 2, 4, \"ng-container\", 4);\n    i0.ɵɵtemplate(3, CascadeSelectSub_ng_template_1_ng_template_3_Template, 2, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(5, CascadeSelectSub_ng_template_1_span_5_Template, 1, 0, \"span\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, CascadeSelectSub_ng_template_1_p_cascadeSelectSub_6_Template, 1, 10, \"p-cascadeSelectSub\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n\n    const _r4 = i0.ɵɵreference(4);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getItemClass(option_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.optionTemplate)(\"ngIfElse\", _r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isOptionGroup(option_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isOptionGroup(option_r1) && ctx_r0.isOptionActive(option_r1));\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"p-cascadeselect-panel-root\": a0\n  };\n};\n\nconst _c2 = [\"focusInput\"];\nconst _c3 = [\"container\"];\n\nfunction CascadeSelect_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c4 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    placeholder: a1\n  };\n};\n\nfunction CascadeSelect_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CascadeSelect_ng_container_6_ng_container_1_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.valueTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c4, ctx_r2.value, ctx_r2.placeholder));\n  }\n}\n\nfunction CascadeSelect_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.label(), \" \");\n  }\n}\n\nconst _c5 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nconst _c6 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nfunction CascadeSelect_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"click\", function CascadeSelect_div_11_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onOverlayClick($event);\n    })(\"@overlayAnimation.start\", function CascadeSelect_div_11_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onOverlayAnimationStart($event);\n    })(\"@overlayAnimation.done\", function CascadeSelect_div_11_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onOverlayAnimationDone($event);\n    });\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵelementStart(2, \"p-cascadeSelectSub\", 14);\n    i0.ɵɵlistener(\"onSelect\", function CascadeSelect_div_11_Template_p_cascadeSelectSub_onSelect_2_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onOptionSelect($event);\n    })(\"onGroupSelect\", function CascadeSelect_div_11_Template_p_cascadeSelectSub_onGroupSelect_2_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onOptionGroupSelect($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@overlayAnimation\", i0.ɵɵpureFunction1(14, _c6, i0.ɵɵpureFunction2(11, _c5, ctx_r5.showTransitionOptions, ctx_r5.hideTransitionOptions)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"options\", ctx_r5.options)(\"selectionPath\", ctx_r5.selectionPath)(\"optionLabel\", ctx_r5.optionLabel)(\"optionValue\", ctx_r5.optionValue)(\"level\", 0)(\"optionTemplate\", ctx_r5.optionTemplate)(\"optionGroupLabel\", ctx_r5.optionGroupLabel)(\"optionGroupChildren\", ctx_r5.optionGroupChildren)(\"dirty\", ctx_r5.dirty)(\"root\", true);\n  }\n}\n\nconst CASCADESELECT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CascadeSelect),\n  multi: true\n};\nlet CascadeSelectSub = /*#__PURE__*/(() => {\n  class CascadeSelectSub {\n    constructor(cascadeSelect, el) {\n      this.el = el;\n      this.level = 0;\n      this.onSelect = new EventEmitter();\n      this.onGroupSelect = new EventEmitter();\n      this.activeOption = null;\n      this.cascadeSelect = cascadeSelect;\n    }\n\n    get parentActive() {\n      return this._parentActive;\n    }\n\n    set parentActive(val) {\n      if (!val) {\n        this.activeOption = null;\n      }\n\n      this._parentActive = val;\n    }\n\n    ngOnInit() {\n      if (this.selectionPath && this.options && !this.dirty) {\n        for (let option of this.options) {\n          if (this.selectionPath.includes(option)) {\n            this.activeOption = option;\n            break;\n          }\n        }\n      }\n\n      if (!this.root) {\n        this.position();\n      }\n    }\n\n    onOptionClick(event, option) {\n      if (this.isOptionGroup(option)) {\n        this.activeOption = this.activeOption === option ? null : option;\n        this.onGroupSelect.emit({\n          originalEvent: event,\n          value: option\n        });\n      } else {\n        this.onSelect.emit({\n          originalEvent: event,\n          value: this.getOptionValue(option)\n        });\n      }\n    }\n\n    onOptionSelect(event) {\n      this.onSelect.emit(event);\n    }\n\n    onOptionGroupSelect(event) {\n      this.onGroupSelect.emit(event);\n    }\n\n    getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n    }\n\n    getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n    }\n\n    getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : null;\n    }\n\n    getOptionGroupChildren(optionGroup) {\n      return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren[this.level]);\n    }\n\n    isOptionGroup(option) {\n      return Object.prototype.hasOwnProperty.call(option, this.optionGroupChildren[this.level]);\n    }\n\n    getOptionLabelToRender(option) {\n      return this.isOptionGroup(option) ? this.getOptionGroupLabel(option) : this.getOptionLabel(option);\n    }\n\n    getItemClass(option) {\n      return {\n        'p-cascadeselect-item': true,\n        'p-cascadeselect-item-group': this.isOptionGroup(option),\n        'p-cascadeselect-item-active p-highlight': this.isOptionActive(option)\n      };\n    }\n\n    isOptionActive(option) {\n      return this.activeOption === option;\n    }\n\n    onKeyDown(event, option, index) {\n      let listItem = event.currentTarget.parentElement;\n\n      switch (event.key) {\n        case 'Down':\n        case 'ArrowDown':\n          var nextItem = this.el.nativeElement.children[0].children[index + 1];\n\n          if (nextItem) {\n            nextItem.children[0].focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          var prevItem = this.el.nativeElement.children[0].children[index - 1];\n\n          if (prevItem) {\n            prevItem.children[0].focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          if (this.isOptionGroup(option)) {\n            if (this.isOptionActive(option)) {\n              listItem.children[1].children[0].children[0].children[0].focus();\n            } else {\n              this.activeOption = option;\n            }\n          }\n\n          event.preventDefault();\n          break;\n\n        case 'Left':\n        case 'ArrowLeft':\n          this.activeOption = null;\n          var parentList = listItem.parentElement.parentElement.parentElement;\n\n          if (parentList) {\n            parentList.children[0].focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case 'Enter':\n          this.onOptionClick(event, option);\n          event.preventDefault();\n          break;\n\n        case 'Tab':\n        case 'Escape':\n          this.cascadeSelect.hide();\n          event.preventDefault();\n          break;\n      }\n    }\n\n    position() {\n      const parentItem = this.el.nativeElement.parentElement;\n      const containerOffset = DomHandler.getOffset(parentItem);\n      const viewport = DomHandler.getViewport();\n      const sublistWidth = this.el.nativeElement.children[0].offsetParent ? this.el.nativeElement.children[0].offsetWidth : DomHandler.getHiddenElementOuterWidth(this.el.nativeElement.children[0]);\n      const itemOuterWidth = DomHandler.getOuterWidth(parentItem.children[0]);\n\n      if (parseInt(containerOffset.left, 10) + itemOuterWidth + sublistWidth > viewport.width - DomHandler.calculateScrollbarWidth()) {\n        this.el.nativeElement.children[0].style.left = '-200%';\n      }\n    }\n\n  }\n\n  CascadeSelectSub.ɵfac = function CascadeSelectSub_Factory(t) {\n    return new (t || CascadeSelectSub)(i0.ɵɵdirectiveInject(forwardRef(() => CascadeSelect)), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  CascadeSelectSub.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CascadeSelectSub,\n    selectors: [[\"p-cascadeSelectSub\"]],\n    inputs: {\n      selectionPath: \"selectionPath\",\n      options: \"options\",\n      optionGroupChildren: \"optionGroupChildren\",\n      optionTemplate: \"optionTemplate\",\n      level: \"level\",\n      optionLabel: \"optionLabel\",\n      optionValue: \"optionValue\",\n      optionGroupLabel: \"optionGroupLabel\",\n      dirty: \"dirty\",\n      root: \"root\",\n      parentActive: \"parentActive\"\n    },\n    outputs: {\n      onSelect: \"onSelect\",\n      onGroupSelect: \"onGroupSelect\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[\"role\", \"listbox\", \"aria-orientation\", \"horizontal\", 1, \"p-cascadeselect-panel\", \"p-cascadeselect-items\", 3, \"ngClass\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [\"role\", \"none\", 3, \"ngClass\"], [\"tabindex\", \"0\", \"pRipple\", \"\", 1, \"p-cascadeselect-item-content\", 3, \"click\", \"keydown\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultOptionTemplate\", \"\"], [\"class\", \"p-cascadeselect-group-icon pi pi-angle-right\", 4, \"ngIf\"], [\"class\", \"p-cascadeselect-sublist\", 3, \"selectionPath\", \"options\", \"optionLabel\", \"optionValue\", \"level\", \"optionGroupLabel\", \"optionGroupChildren\", \"parentActive\", \"dirty\", \"optionTemplate\", \"onSelect\", \"onOptionGroupSelect\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-cascadeselect-item-text\"], [1, \"p-cascadeselect-group-icon\", \"pi\", \"pi-angle-right\"], [1, \"p-cascadeselect-sublist\", 3, \"selectionPath\", \"options\", \"optionLabel\", \"optionValue\", \"level\", \"optionGroupLabel\", \"optionGroupChildren\", \"parentActive\", \"dirty\", \"optionTemplate\", \"onSelect\", \"onOptionGroupSelect\"]],\n    template: function CascadeSelectSub_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ul\", 0);\n        i0.ɵɵtemplate(1, CascadeSelectSub_ng_template_1_Template, 7, 5, \"ng-template\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx.root));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.options);\n      }\n    },\n    directives: [i1.NgClass, i1.NgForOf, i2.Ripple, i1.NgIf, i1.NgTemplateOutlet, CascadeSelectSub],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CascadeSelectSub;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CascadeSelect = /*#__PURE__*/(() => {\n  class CascadeSelect {\n    constructor(el, cd, config, overlayService) {\n      this.el = el;\n      this.cd = cd;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.onChange = new EventEmitter();\n      this.onGroupChange = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onBeforeShow = new EventEmitter();\n      this.onBeforeHide = new EventEmitter();\n      this.selectionPath = null;\n      this.focused = false;\n      this.filled = false;\n      this.overlayVisible = false;\n      this.dirty = false;\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n    }\n\n    ngOnInit() {\n      this.updateSelectionPath();\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'value':\n            this.valueTemplate = item.template;\n            break;\n\n          case 'option':\n            this.optionTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    onOptionSelect(event) {\n      this.value = event.value;\n      this.updateSelectionPath();\n      this.onModelChange(this.value);\n      this.onChange.emit(event);\n      this.hide();\n      this.focusInputEl.nativeElement.focus();\n    }\n\n    onOptionGroupSelect(event) {\n      this.dirty = true;\n      this.onGroupChange.emit(event);\n    }\n\n    getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n    }\n\n    getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n    }\n\n    getOptionGroupChildren(optionGroup, level) {\n      return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren[level]);\n    }\n\n    isOptionGroup(option, level) {\n      return Object.prototype.hasOwnProperty.call(option, this.optionGroupChildren[level]);\n    }\n\n    updateSelectionPath() {\n      let path;\n\n      if (this.value != null && this.options) {\n        for (let option of this.options) {\n          path = this.findModelOptionInGroup(option, 0);\n\n          if (path) {\n            break;\n          }\n        }\n      }\n\n      this.selectionPath = path;\n      this.updateFilledState();\n    }\n\n    updateFilledState() {\n      this.filled = !(this.selectionPath == null || this.selectionPath.length == 0);\n    }\n\n    findModelOptionInGroup(option, level) {\n      if (this.isOptionGroup(option, level)) {\n        let selectedOption;\n\n        for (let childOption of this.getOptionGroupChildren(option, level)) {\n          selectedOption = this.findModelOptionInGroup(childOption, level + 1);\n\n          if (selectedOption) {\n            selectedOption.unshift(option);\n            return selectedOption;\n          }\n        }\n      } else if (ObjectUtils.equals(this.value, this.getOptionValue(option), this.dataKey)) {\n        return [option];\n      }\n\n      return null;\n    }\n\n    show() {\n      this.onBeforeShow.emit();\n      this.overlayVisible = true;\n    }\n\n    hide() {\n      this.onBeforeHide.emit();\n      this.overlayVisible = false;\n      this.cd.markForCheck();\n    }\n\n    onClick(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.overlayEl || !this.overlayEl || !this.overlayEl.contains(event.target)) {\n        if (this.overlayVisible) {\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        this.focusInputEl.nativeElement.focus();\n      }\n    }\n\n    onFocus() {\n      this.focused = true;\n    }\n\n    onBlur() {\n      this.focused = false;\n    }\n\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n    }\n\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlayEl = event.element;\n          this.onOverlayEnter();\n          break;\n      }\n    }\n\n    onOverlayAnimationDone(event) {\n      switch (event.toState) {\n        case 'void':\n          this.onOverlayLeave();\n          break;\n      }\n    }\n\n    onOverlayEnter() {\n      ZIndexUtils.set('overlay', this.overlayEl, this.config.zIndex.overlay);\n      this.appendContainer();\n      this.alignOverlay();\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.onShow.emit();\n    }\n\n    onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.onHide.emit();\n      ZIndexUtils.clear(this.overlayEl);\n      this.overlayEl = null;\n      this.dirty = false;\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.updateSelectionPath();\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    alignOverlay() {\n      if (this.appendTo) {\n        DomHandler.absolutePosition(this.overlayEl, this.containerEl.nativeElement);\n        this.overlayEl.style.minWidth = DomHandler.getOuterWidth(this.containerEl.nativeElement) + 'px';\n      } else {\n        DomHandler.relativePosition(this.overlayEl, this.containerEl.nativeElement);\n      }\n    }\n\n    bindOutsideClickListener() {\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = event => {\n          if (this.overlayVisible && this.overlayEl && !this.containerEl.nativeElement.contains(event.target) && !this.overlayEl.contains(event.target)) {\n            this.hide();\n          }\n        };\n\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    }\n\n    unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerEl.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    bindResizeListener() {\n      if (!this.resizeListener) {\n        this.resizeListener = () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        };\n\n        window.addEventListener('resize', this.resizeListener);\n      }\n    }\n\n    unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    }\n\n    appendContainer() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlayEl);else document.getElementById(this.appendTo).appendChild(this.overlayEl);\n      }\n    }\n\n    restoreAppend() {\n      if (this.overlayEl && this.appendTo) {\n        if (this.appendTo === 'body') document.body.removeChild(this.overlayEl);else document.getElementById(this.appendTo).removeChild(this.overlayEl);\n      }\n    }\n\n    label() {\n      if (this.selectionPath) return this.getOptionLabel(this.selectionPath[this.selectionPath.length - 1]);else return this.placeholder || 'p-emptylabel';\n    }\n\n    onKeyDown(event) {\n      switch (event.code) {\n        case 'Down':\n        case 'ArrowDown':\n          if (this.overlayVisible) {\n            DomHandler.findSingle(this.overlayEl, '.p-cascadeselect-item').children[0].focus();\n          } else if (event.altKey && this.options && this.options.length) {\n            this.show();\n          }\n\n          event.preventDefault();\n          break;\n\n        case 'Space':\n        case 'Enter':\n          if (!this.overlayVisible) this.show();else this.hide();\n          event.preventDefault();\n          break;\n\n        case 'Tab':\n        case 'Escape':\n          if (this.overlayVisible) {\n            this.hide();\n            event.preventDefault();\n          }\n\n          break;\n      }\n    }\n\n    containerClass() {\n      return {\n        'p-cascadeselect p-component p-inputwrapper': true,\n        'p-disabled': this.disabled,\n        'p-focus': this.focused\n      };\n    }\n\n    labelClass() {\n      return {\n        'p-cascadeselect-label': true,\n        'p-placeholder': this.label() === this.placeholder,\n        'p-cascadeselect-label-empty': !this.value && (this.label() === 'p-emptylabel' || this.label().length === 0)\n      };\n    }\n\n    ngOnDestroy() {\n      this.restoreAppend();\n      this.unbindOutsideClickListener();\n      this.unbindResizeListener();\n\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      this.overlayEl = null;\n    }\n\n  }\n\n  CascadeSelect.ɵfac = function CascadeSelect_Factory(t) {\n    return new (t || CascadeSelect)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.PrimeNGConfig), i0.ɵɵdirectiveInject(i3.OverlayService));\n  };\n\n  CascadeSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CascadeSelect,\n    selectors: [[\"p-cascadeSelect\"]],\n    contentQueries: function CascadeSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function CascadeSelect_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusInputEl = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerEl = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n    hostVars: 4,\n    hostBindings: function CascadeSelect_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused || ctx.overlayVisible);\n      }\n    },\n    inputs: {\n      styleClass: \"styleClass\",\n      style: \"style\",\n      options: \"options\",\n      optionLabel: \"optionLabel\",\n      optionValue: \"optionValue\",\n      optionGroupLabel: \"optionGroupLabel\",\n      optionGroupChildren: \"optionGroupChildren\",\n      placeholder: \"placeholder\",\n      value: \"value\",\n      dataKey: \"dataKey\",\n      inputId: \"inputId\",\n      tabindex: \"tabindex\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      appendTo: \"appendTo\",\n      disabled: \"disabled\",\n      rounded: \"rounded\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onGroupChange: \"onGroupChange\",\n      onShow: \"onShow\",\n      onHide: \"onHide\",\n      onBeforeShow: \"onBeforeShow\",\n      onBeforeHide: \"onBeforeHide\"\n    },\n    features: [i0.ɵɵProvidersFeature([CASCADESELECT_VALUE_ACCESSOR])],\n    decls: 12,\n    vars: 14,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [\"container\", \"\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"readonly\", \"\", \"aria-haspopup\", \"listbox\", 3, \"disabled\", \"focus\", \"blur\", \"keydown\"], [\"focusInput\", \"\"], [3, \"ngClass\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultValueTemplate\", \"\"], [\"role\", \"button\", \"aria-haspopup\", \"listbox\", 1, \"p-cascadeselect-trigger\"], [1, \"p-cascadeselect-trigger-icon\", \"pi\", \"pi-chevron-down\"], [\"class\", \"p-cascadeselect-panel p-component\", 3, \"click\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-cascadeselect-panel\", \"p-component\", 3, \"click\"], [1, \"p-cascadeselect-items-wrapper\"], [1, \"p-cascadeselect-items\", 3, \"options\", \"selectionPath\", \"optionLabel\", \"optionValue\", \"level\", \"optionTemplate\", \"optionGroupLabel\", \"optionGroupChildren\", \"dirty\", \"root\", \"onSelect\", \"onGroupSelect\"]],\n    template: function CascadeSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"click\", function CascadeSelect_Template_div_click_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"input\", 3, 4);\n        i0.ɵɵlistener(\"focus\", function CascadeSelect_Template_input_focus_3_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function CascadeSelect_Template_input_blur_3_listener() {\n          return ctx.onBlur();\n        })(\"keydown\", function CascadeSelect_Template_input_keydown_3_listener($event) {\n          return ctx.onKeyDown($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"span\", 5);\n        i0.ɵɵtemplate(6, CascadeSelect_ng_container_6_Template, 2, 5, \"ng-container\", 6);\n        i0.ɵɵtemplate(7, CascadeSelect_ng_template_7_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelement(10, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, CascadeSelect_div_11_Template, 3, 16, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(8);\n\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"tabindex\", ctx.tabindex)(\"aria-expanded\", ctx.overlayVisible)(\"aria-labelledby\", ctx.ariaLabelledBy);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", ctx.labelClass());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.valueTemplate)(\"ngIfElse\", _r3);\n        i0.ɵɵadvance(3);\n        i0.ɵɵattribute(\"aria-expanded\", ctx.overlayVisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    directives: [i1.NgClass, i1.NgStyle, i1.NgIf, i1.NgTemplateOutlet, CascadeSelectSub],\n    styles: [\".p-cascadeselect{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-cascadeselect-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-cascadeselect-label{display:block;white-space:nowrap;overflow:hidden;flex:1 1 auto;width:1%;text-overflow:ellipsis;cursor:pointer}.p-cascadeselect-label-empty{overflow:hidden;visibility:hidden}.p-cascadeselect .p-cascadeselect-panel{min-width:100%}.p-cascadeselect-panel{position:absolute;top:0;left:0}.p-cascadeselect-item{cursor:pointer;font-weight:400;white-space:nowrap}.p-cascadeselect-item-content{display:flex;align-items:center;overflow:hidden;position:relative}.p-cascadeselect-group-icon{margin-left:auto}.p-cascadeselect-items{margin:0;padding:0;list-style-type:none}.p-fluid .p-cascadeselect{display:flex}.p-fluid .p-cascadeselect .p-cascadeselect-label{width:1%}.p-cascadeselect-sublist{position:absolute;min-width:100%;z-index:1;display:none}.p-cascadeselect-item-active{overflow:visible!important}.p-cascadeselect-item-active>.p-cascadeselect-sublist{display:block;left:100%;top:0}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return CascadeSelect;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CascadeSelectModule = /*#__PURE__*/(() => {\n  class CascadeSelectModule {}\n\n  CascadeSelectModule.ɵfac = function CascadeSelectModule_Factory(t) {\n    return new (t || CascadeSelectModule)();\n  };\n\n  CascadeSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CascadeSelectModule\n  });\n  CascadeSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedModule, RippleModule], SharedModule]\n  });\n  return CascadeSelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CASCADESELECT_VALUE_ACCESSOR, CascadeSelect, CascadeSelectModule, CascadeSelectSub }; //# sourceMappingURL=primeng-cascadeselect.mjs.map","map":null,"metadata":{},"sourceType":"module"}