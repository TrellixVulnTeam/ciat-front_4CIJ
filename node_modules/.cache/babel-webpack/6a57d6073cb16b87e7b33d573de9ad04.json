{"ast":null,"code":"import _asyncToGenerator from \"/home/cristian/Escritorio/ciatTest/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nexport class AuthService {\n  constructor(afAuth) {\n    this.afAuth = afAuth;\n  } //Mertodo para loguearse en la autentificación de Firebase\n\n\n  onLogin(user) {\n    return this.afAuth.auth.signInWithEmailAndPassword(user.username, user.password).then(user => Promise.resolve(user)) //Mensaje de error si el usuario no se a registrado o la contraseña falla\n    .catch(err => Promise.reject(err));\n  } // Mertodo para Registrarse en la autentificación de Firebase\n\n\n  onRegister(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.afAuth.auth.createUserWithEmailAndPassword(user.username, user.password).then(res => {\n        _this.afAuth.auth.signInWithEmailAndPassword(user.username, user.password);\n      }).then(user => Promise.resolve(user)).catch(err => Promise.reject(err));\n    })();\n  } // Devuelve la session\n\n\n  get Session() {\n    return this.afAuth.authState;\n  } // Logout de usuario o salir de la sección\n\n\n  logout() {\n    this.afAuth.auth.signOut().then();\n  } // Obtenemos el id de usuario.\n\n\n  getUser() {\n    var _a;\n\n    return (_a = this.afAuth.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;\n  } //Metodo para restablecer contraseña\n\n\n  resetPassword(email) {\n    return this.afAuth.auth.sendPasswordResetEmail(email);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/cristian/Escritorio/ciatTest/src/app/services/auth/auth.service.ts"],"names":["i0","i1","AuthService","constructor","afAuth","onLogin","user","auth","signInWithEmailAndPassword","username","password","then","Promise","resolve","catch","err","reject","onRegister","createUserWithEmailAndPassword","res","Session","authState","logout","signOut","getUser","_a","currentUser","uid","resetPassword","email","sendPasswordResetEmail","ɵfac","AuthService_Factory","t","ɵɵinject","AngularFireAuth","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH,GAHoB,CAIrB;;;AACAC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,WAAO,KAAKF,MAAL,CAAYG,IAAZ,CAAiBC,0BAAjB,CAA4CF,IAAI,CAACG,QAAjD,EAA2DH,IAAI,CAACI,QAAhE,EACFC,IADE,CACGL,IAAI,IAAIM,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CADX,EAEH;AAFG,KAGFQ,KAHE,CAGIC,GAAG,IAAIH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAHX,CAAP;AAIH,GAVoB,CAWrB;;;AACME,EAAAA,UAAU,CAACX,IAAD,EAAO;AAAA;;AAAA;AACnB,aAAO,KAAI,CAACF,MAAL,CAAYG,IAAZ,CAAiBW,8BAAjB,CAAgDZ,IAAI,CAACG,QAArD,EAA+DH,IAAI,CAACI,QAApE,EACFC,IADE,CACIQ,GAAD,IAAS;AACf,QAAA,KAAI,CAACf,MAAL,CAAYG,IAAZ,CAAiBC,0BAAjB,CAA4CF,IAAI,CAACG,QAAjD,EAA2DH,IAAI,CAACI,QAAhE;AACH,OAHM,EAIFC,IAJE,CAIGL,IAAI,IAAIM,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CAJX,EAKFQ,KALE,CAKIC,GAAG,IAAIH,OAAO,CAACI,MAAR,CAAeD,GAAf,CALX,CAAP;AADmB;AAOtB,GAnBoB,CAoBrB;;;AACW,MAAPK,OAAO,GAAG;AACV,WAAO,KAAKhB,MAAL,CAAYiB,SAAnB;AACH,GAvBoB,CAwBrB;;;AACAC,EAAAA,MAAM,GAAG;AACL,SAAKlB,MAAL,CAAYG,IAAZ,CAAiBgB,OAAjB,GAA2BZ,IAA3B;AACH,GA3BoB,CA4BrB;;;AACAa,EAAAA,OAAO,GAAG;AACN,QAAIC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAG,KAAKrB,MAAL,CAAYG,IAAZ,CAAiBmB,WAAvB,MAAwC,IAAxC,IAAgDD,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACE,GAAnF;AACH,GAhCoB,CAiCrB;;;AACAC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB,WAAO,KAAKzB,MAAL,CAAYG,IAAZ,CAAiBuB,sBAAjB,CAAwCD,KAAxC,CAAP;AACH;;AApCoB;;AAsCzB3B,WAAW,CAAC6B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI/B,WAAV,EAAuBF,EAAE,CAACkC,QAAH,CAAYjC,EAAE,CAACkC,eAAf,CAAvB,CAAP;AAAiE,CAAtH;;AACAjC,WAAW,CAACkC,KAAZ,GAAoB,aAAcpC,EAAE,CAACqC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEpC,WAAT;AAAsBqC,EAAAA,OAAO,EAAErC,WAAW,CAAC6B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nexport class AuthService {\n    constructor(afAuth) {\n        this.afAuth = afAuth;\n    }\n    //Mertodo para loguearse en la autentificación de Firebase\n    onLogin(user) {\n        return this.afAuth.auth.signInWithEmailAndPassword(user.username, user.password)\n            .then(user => Promise.resolve(user))\n            //Mensaje de error si el usuario no se a registrado o la contraseña falla\n            .catch(err => Promise.reject(err));\n    }\n    // Mertodo para Registrarse en la autentificación de Firebase\n    async onRegister(user) {\n        return this.afAuth.auth.createUserWithEmailAndPassword(user.username, user.password)\n            .then((res) => {\n            this.afAuth.auth.signInWithEmailAndPassword(user.username, user.password);\n        })\n            .then(user => Promise.resolve(user))\n            .catch(err => Promise.reject(err));\n    }\n    // Devuelve la session\n    get Session() {\n        return this.afAuth.authState;\n    }\n    // Logout de usuario o salir de la sección\n    logout() {\n        this.afAuth.auth.signOut().then();\n    }\n    // Obtenemos el id de usuario.\n    getUser() {\n        var _a;\n        return (_a = this.afAuth.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;\n    }\n    //Metodo para restablecer contraseña\n    resetPassword(email) {\n        return this.afAuth.auth.sendPasswordResetEmail(email);\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}