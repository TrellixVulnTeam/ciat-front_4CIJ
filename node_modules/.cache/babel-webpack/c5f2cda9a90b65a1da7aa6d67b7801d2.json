{"ast":null,"code":"import _asyncToGenerator from \"/home/cristian/Documentos/repositorios/bitbucket/puntocomercios/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nlet AuthService = class AuthService {\n  constructor(afAuth) {\n    this.afAuth = afAuth;\n  } //Mertodo para loguearse en la autentificación de Firebase\n\n\n  onLogin(user) {\n    return this.afAuth.auth.signInWithEmailAndPassword(user.email, user.password).then(user => Promise.resolve(user)) //Mensaje de error si el usuario no se a registrado o la contraseña falla\n    .catch(err => Promise.reject(err));\n  } // Mertodo para Registrarse en la autentificación de Firebase\n\n\n  onRegister(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.afAuth.auth.createUserWithEmailAndPassword(user.email, user.password).then(res => {\n        _this.afAuth.auth.signInWithEmailAndPassword(user.email, user.password);\n      }).then(user => Promise.resolve(user)).catch(err => Promise.reject(err));\n    })();\n  } // Devuelve la session\n\n\n  get Session() {\n    return this.afAuth.authState;\n  } // Logout de usuario o salir de la sección\n\n\n  logout() {\n    this.afAuth.auth.signOut().then();\n  } // Obtenemos el id de usuario.\n\n\n  getUser() {\n    var _a;\n\n    return (_a = this.afAuth.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;\n  } //Metodo para restablecer contraseña\n\n\n  resetPassword(email) {\n    return this.afAuth.auth.sendPasswordResetEmail(email);\n  }\n\n};\n\nAuthService.ctorParameters = () => [{\n  type: AngularFireAuth\n}];\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"sources":["/home/cristian/Documentos/repositorios/bitbucket/puntocomercios/src/app/services/auth/auth.service.ts"],"names":["__decorate","Injectable","AngularFireAuth","AuthService","constructor","afAuth","onLogin","user","auth","signInWithEmailAndPassword","email","password","then","Promise","resolve","catch","err","reject","onRegister","createUserWithEmailAndPassword","res","Session","authState","logout","signOut","getUser","_a","currentUser","uid","resetPassword","sendPasswordResetEmail","ctorParameters","type","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,IAAIC,WAAW,GAAG,MAAMA,WAAN,CAAkB;AAChCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH,GAH+B,CAIhC;;;AACAC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,WAAO,KAAKF,MAAL,CAAYG,IAAZ,CAAiBC,0BAAjB,CAA4CF,IAAI,CAACG,KAAjD,EAAwDH,IAAI,CAACI,QAA7D,EACFC,IADE,CACGL,IAAI,IAAIM,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CADX,EAEH;AAFG,KAGFQ,KAHE,CAGIC,GAAG,IAAIH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAHX,CAAP;AAIH,GAV+B,CAWhC;;;AACME,EAAAA,UAAU,CAACX,IAAD,EAAO;AAAA;;AAAA;AACnB,aAAO,KAAI,CAACF,MAAL,CAAYG,IAAZ,CAAiBW,8BAAjB,CAAgDZ,IAAI,CAACG,KAArD,EAA4DH,IAAI,CAACI,QAAjE,EACFC,IADE,CACIQ,GAAD,IAAS;AACf,QAAA,KAAI,CAACf,MAAL,CAAYG,IAAZ,CAAiBC,0BAAjB,CAA4CF,IAAI,CAACG,KAAjD,EAAwDH,IAAI,CAACI,QAA7D;AACH,OAHM,EAIFC,IAJE,CAIGL,IAAI,IAAIM,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CAJX,EAKFQ,KALE,CAKIC,GAAG,IAAIH,OAAO,CAACI,MAAR,CAAeD,GAAf,CALX,CAAP;AADmB;AAOtB,GAnB+B,CAoBhC;;;AACW,MAAPK,OAAO,GAAG;AACV,WAAO,KAAKhB,MAAL,CAAYiB,SAAnB;AACH,GAvB+B,CAwBhC;;;AACAC,EAAAA,MAAM,GAAG;AACL,SAAKlB,MAAL,CAAYG,IAAZ,CAAiBgB,OAAjB,GAA2BZ,IAA3B;AACH,GA3B+B,CA4BhC;;;AACAa,EAAAA,OAAO,GAAG;AACN,QAAIC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAG,KAAKrB,MAAL,CAAYG,IAAZ,CAAiBmB,WAAvB,MAAwC,IAAxC,IAAgDD,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACE,GAAnF;AACH,GAhC+B,CAiChC;;;AACAC,EAAAA,aAAa,CAACnB,KAAD,EAAQ;AACjB,WAAO,KAAKL,MAAL,CAAYG,IAAZ,CAAiBsB,sBAAjB,CAAwCpB,KAAxC,CAAP;AACH;;AApC+B,CAApC;;AAsCAP,WAAW,CAAC4B,cAAZ,GAA6B,MAAM,CAC/B;AAAEC,EAAAA,IAAI,EAAE9B;AAAR,CAD+B,CAAnC;;AAGAC,WAAW,GAAGH,UAAU,CAAC,CACrBC,UAAU,CAAC;AACPgC,EAAAA,UAAU,EAAE;AADL,CAAD,CADW,CAAD,EAIrB9B,WAJqB,CAAxB;AAKA,SAASA,WAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nlet AuthService = class AuthService {\n    constructor(afAuth) {\n        this.afAuth = afAuth;\n    }\n    //Mertodo para loguearse en la autentificación de Firebase\n    onLogin(user) {\n        return this.afAuth.auth.signInWithEmailAndPassword(user.email, user.password)\n            .then(user => Promise.resolve(user))\n            //Mensaje de error si el usuario no se a registrado o la contraseña falla\n            .catch(err => Promise.reject(err));\n    }\n    // Mertodo para Registrarse en la autentificación de Firebase\n    async onRegister(user) {\n        return this.afAuth.auth.createUserWithEmailAndPassword(user.email, user.password)\n            .then((res) => {\n            this.afAuth.auth.signInWithEmailAndPassword(user.email, user.password);\n        })\n            .then(user => Promise.resolve(user))\n            .catch(err => Promise.reject(err));\n    }\n    // Devuelve la session\n    get Session() {\n        return this.afAuth.authState;\n    }\n    // Logout de usuario o salir de la sección\n    logout() {\n        this.afAuth.auth.signOut().then();\n    }\n    // Obtenemos el id de usuario.\n    getUser() {\n        var _a;\n        return (_a = this.afAuth.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;\n    }\n    //Metodo para restablecer contraseña\n    resetPassword(email) {\n        return this.afAuth.auth.sendPasswordResetEmail(email);\n    }\n};\nAuthService.ctorParameters = () => [\n    { type: AngularFireAuth }\n];\nAuthService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], AuthService);\nexport { AuthService };\n"]},"metadata":{},"sourceType":"module"}